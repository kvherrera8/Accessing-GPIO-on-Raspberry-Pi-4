import tkinter as tk
from tkinter import ttk
import os
import time
import RPi.GPIO as GPIO
import subprocess
from threading import Thread

GPIO.setmode(GPIO.BOARD)

input_pin_numbers = [8, 10, 19, 33, 35, 18, 7]
for pin in input_pin_numbers:
    GPIO.setup(pin, GPIO.IN)

output_pin_numbers = [11, 13, 15, 29, 31, 37, 16]
for pin in output_pin_numbers:
    GPIO.setup(pin, GPIO.OUT)

g_pins = [[8, 11], [10, 13], [19, 15], [33, 29], [35, 31], [18, 37], [7, 16]]
for pin in g_pins:
    GPIO.setup(pin[0], GPIO.IN)
    GPIO.setup(pin[1], GPIO.OUT)

def ONOFF(in_pin, out_pin, onoff_state):
    iter = 0
    max_iter = 3
    if onoff_state:
        while GPIO.input(in_pin) != onoff_state and iter <= max_iter:
            GPIO.output(out_pin, 1)
            time.sleep(0.1)
            GPIO.output(out_pin, 0)
            time.sleep(0.5)
            iter += 1
        return iter <= max_iter

for pin in g_pins:
    ONOFF(pin[0], pin[1], False)

def run_command(command, timeout=None):
    try:
        process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output, error = process.communicate(timeout=timeout)
        return process.returncode, output, error
    except subprocess.TimeoutExpired:
        process.kill()
        output, error = process.communicate()
        return -1, output, error

def buttonProc():
    threads = []
    success_pins = []
    failed_pins = []

    input_states = [GPIO.input(pin) for pin in input_pin_numbers]

    if any(input_states):
        for pin in output_pin_numbers:
            GPIO.output(pin, 1)

        for i, pin_pair in enumerate(g_pins):
            thread = Thread(target=handle_pin, args=(i, pin_pair[0], pin_pair[1], success_pins, failed_pins))
            threads.append(thread)
            thread.start()

        for thread in threads:
            thread.join()

        # Run dd command only for successful pairs
        if success_pins:
            dd_command = "sudo dd bs=4M if=Zyrlo_2022_08_14_RC1.img of=/dev/sdb conv=fsync"
            print("\n Running dd command...")
            for i, pin_pair in enumerate(g_pins):
                if pin_pair[1] in success_pins:
                    update_progress(i, 60)
                    ret_code, dd_output, dd_error = run_command(dd_command)

                    while True:
                        status_command = "status=progress"
                        ret_code, status_output, status_error = run_command(status_command)
                        if ret_code == 0:
                            print("\n dd command completed successfully")
                            update_progress(i, 100)
                            time.sleep(5)  # Wait for 5 seconds
                            os.system("sudo reboot")  # Log out and reboot
                            window.destroy()  # Close the GUI window
                            break  # Exit the loop
                        else:
                            print(f"\n Error during status check: {status_error.decode()}")
                            print(f"\n Output during status check: {status_output.decode()}")
                        time.sleep(30)

        # Update GUI with final status
        for i, pin_pair in enumerate(g_pins):
            if pin_pair[1] in success_pins:
                status_labels[i].config(text=f"Pin pair {pin_pair[0]} and {pin_pair[1]}: Success", fg='green')
            elif pin_pair[1] in failed_pins:
                status_labels[i].config(text=f"Pin pair {pin_pair[0]} and {pin_pair[1]}: Failed", fg='red')
            else:
                status_labels[i].config(text=f"Pin pair {pin_pair[0]} and {pin_pair[1]}: Not attempted", fg='grey')
    else:
        for pin in output_pin_numbers:
            GPIO.output(pin, 0)

def buttonFunc():
    x = Thread(target=buttonProc)
    x.start()

def handle_pin(index, in_pin, out_pin, success_pins, failed_pins):
    GPIO.output(out_pin, 1)
    time.sleep(1)
    retries = 0
    letter = 'a'

    while retries < 3:
        os.system("/home/pi/rpiboot_wraper.sh")
        update_progress(index, 30)
        time.sleep(15)

        fileName = f'/dev/sd{letter}'
        if os.path.exists(fileName):
            print(f"\n Device found at {fileName} for pin {out_pin}")
            success_pins.append(out_pin)
            return  # Exit the function if successful
        else:
            print(f"\n Retrying command for pin {out_pin} (Attempt {retries + 1})")
            retries += 1
            letter = chr(ord(letter) + 1)

    print(f"\n Command failed on pin {out_pin} after 3 attempts")
    failed_pins.append(out_pin)

def on_closing():
    GPIO.cleanup()
    print("\n GPIO cleaned up")
    sys.exit()

window = tk.Tk()
window.geometry("900x900")
window.protocol("WM_DELETE_WINDOW", on_closing)
window.configure(bg='lightgrey')

progress_bars = {}
status_labels = {}

button = tk.Button(window, text="Run Reboot", command=buttonFunc, fg='white', bg='black')
button.pack(pady=10)

for i, pin_pair in enumerate(g_pins):
    frame = tk.Frame(window, bg='lightgrey')
    frame.pack(anchor='w', padx=20, pady=5)

    label = tk.Label(frame, text=f"Progress for pin pair {pin_pair[0]} and {pin_pair[1]}", bg='lightgrey')
    label.pack(side='left', pady=10)

    progress_bar = ttk.Progressbar(frame, orient='horizontal', length=300, mode='determinate')
    progress_bar.pack(side='left', padx=20)
    progress_bars[i] = progress_bar

    status_label = tk.Label(frame, text=f"Status for pin pair {pin_pair[0]} and {pin_pair[1]}", bg='lightgrey')
    status_label.pack(side='left', pady=10)
    status_labels[i] = status_label

def update_progress(index, value):
    progress_bars[index]['value'] = value
    window.update_idletasks()

try:
    window.mainloop()
except KeyboardInterrupt:
    print("\n KeyboardInterrupt caught, cleaning up GPIO and exiting")
    GPIO.cleanup()
    sys.exit()
