import tkinter as tk  # Import tkinter library for GUI
from tkinter import ttk  # Import themed widgets for tkinter
import os  # Import os library for system commands
import time  # Import time library for sleep
import RPi.GPIO as GPIO  # Import GPIO library for Raspberry Pi GPIO control
import sys  # Import sys library for system-specific functions
import subprocess  # Import subprocess library for running system commands
from threading import Thread  # Import Thread class for multi-threading

# Set GPIO pin numbering mode to BOARD (physical pin numbers)
GPIO.setmode(GPIO.BOARD)

# Define GPIO pins
input_pin_numbers = [8, 10, 19, 33, 35, 18, 7]  # List of input pin numbers
output_pin_numbers = [11, 13, 15, 29, 31, 37, 16]  # List of output pin numbers
g_pins = [[8, 11], [10, 13], [19, 15], [33, 29], [35, 31], [18, 37], [7, 16]]  # List of GPIO pin pairs

# Setup GPIO pins
for pin in input_pin_numbers:
    GPIO.setup(pin, GPIO.IN)  # Set pin as input

for pin in output_pin_numbers:
    GPIO.setup(pin, GPIO.OUT)  # Set pin as output
    GPIO.output(pin, 0)  # Initialize pin to LOW

# Function to toggle GPIO output pin based on input pin state
def ONOFF(in_pin, out_pin, onoff_state):
    iter = 0  # Initialize iteration counter
    max_iter = 3  # Maximum iterations to check input state
    if onoff_state:  # If onoff_state is True
        while GPIO.input(in_pin) != onoff_state:  # Loop until input pin matches onoff_state
            GPIO.output(out_pin, 1)  # Set output pin to HIGH
            time.sleep(0.1)  # Wait for 0.1 seconds
            GPIO.output(out_pin, 0)  # Set output pin to LOW
            time.sleep(0.5)  # Wait for 0.5 seconds
            if iter > max_iter:  # If maximum iterations exceeded
                return -1  # Return failure
            iter += 1  # Increment iteration counter
        return 0  # Return success
    return 0  # Return success if onoff_state is False

# Function to run a shell command with an optional timeout
def run_command(command, timeout=None):
    try:
        process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)  # Run command
        output, error = process.communicate(timeout=timeout)  # Capture output and error
        return process.returncode, output, error  # Return command results
    except subprocess.TimeoutExpired:
        process.kill()  # Kill the process if timeout expires
        output, error = process.communicate()  # Capture output and error
        return -1, output, error  # Return failure

# Function to process button press
def buttonProc():
    threads = []  # List to store threads
    success_pins = []  # List to store successful pins
    failed_pins = []  # List to store failed pins

    input_states = [GPIO.input(pin) for pin in input_pin_numbers]  # Read the state of each input pin

    for i, state in enumerate(input_states):
        if state == GPIO.HIGH:  # If input pin is HIGH
            star_labels[i].config(bg='green')  # Set star label background to green
        else:
            star_labels[i].config(bg='red')  # Set star label background to red

    if any(input_states):  # If any input pin is HIGH
        for pin in output_pin_numbers:
            GPIO.output(pin, 1)  # Set all output pins to HIGH

        for i, pin_pair in enumerate(g_pins):
            if GPIO.input(pin_pair[0]) == GPIO.HIGH:  # If input pin of the pair is HIGH
                thread = Thread(target=handle_pin, args=(i, pin_pair[0], pin_pair[1], success_pins, failed_pins))  # Create a thread
                threads.append(thread)  # Add thread to the list
                thread.start()  # Start the thread

        for thread in threads:
            thread.join()  # Wait for all threads to complete

        for i, pin_pair in enumerate(g_pins):
            if pin_pair[1] in success_pins:  # If output pin is in success list
                status_labels[i].config(text=f"Pin pair {pin_pair[0]} and {pin_pair[1]}: Success", fg='green')  # Update status label to success
            else:
                status_labels[i].config(text=f"Pin pair {pin_pair[0]} and {pin_pair[1]}: Failed", fg='red')  # Update status label to failure
    else:
        for pin in output_pin_numbers:
            GPIO.output(pin, 0)  # Set all output pins to LOW if no input pins are HIGH

# Function to handle pin programming
def handle_pin(index, in_pin, out_pin, success_pins, failed_pins):
    if ONOFF(in_pin, out_pin, True) < 0:  # Try to toggle the output pin based on input pin state
        status_labels[index].config(text=f"Pin pair {in_pin} and {out_pin}: Failed", fg='red')  # Update status label to failure
        return -1  # Return failure
    reboot_and_check_file(index, in_pin, out_pin, success_pins, failed_pins)  # Reboot and check file

# Function to execute dd command
def execute_dd_command(index, out_pin):
    dd_command = "sudo dd bs=4M if=Zyrlo_2022_08_14_RC1.img of=/dev/sdb conv=fsync"  # dd command to program the device
    print("\n Running dd command...")  # Print running dd command message
    update_progress(index, 60)  # Update progress to 60%
    ret_code, dd_output, dd_error = run_command(dd_command)  # Run the dd command

    while True:
        status_command = "status=progress"  # Command to check dd status
        ret_code, status_output, status_error = run_command(status_command)  # Run status command
        if ret_code == 0:  # If status command is successful
            print("\n dd command completed successfully")  # Print success message
            break  # Break the loop
        else:
            print(f"\n dd command failed with error: {status_error}")  # Print failure message
            break  # Break the loop
    update_progress(index, 100)  # Update progress to 100%

# Function to reboot and check if the device file exists
def reboot_and_check_file(index, in_pin, out_pin, success_pins, failed_pins):
    os.system("/home/pi/rpiboot_wraper.sh")  # Run the rpiboot wrapper script
    update_progress(index, 30)  # Update progress to 30%
    time.sleep(15)  # Wait for 15 seconds

    letter = 'a'  # Initialize device letter
    fileName = f'/dev/sd{letter}'  # Device file name
    if os.path.exists(fileName):  # Check if device file exists
        print(f"\n Device found at {fileName}")  # Print device found message
        execute_dd_command(index, out_pin)  # Execute dd command if device is found
        status_labels[index].config(text=f"Pin pair {in_pin} and {out_pin}: Programming Completed", fg='green')  # Update status label to programming completed
    else:
        print(f"\n Device not found")  # Print device not found message
        status_labels[index].config(text=f"Pin pair {in_pin} and {out_pin}: Failed", fg='red')  # Update status label to failure

# Function to reset GPIO pins and UI elements
def reset_pins():
    for pin in output_pin_numbers:
        GPIO.output(pin, 0)  # Set all output pins to LOW
    for pin in input_pin_numbers:
        GPIO.setup(pin, GPIO.IN)  # Set all input pins to input mode
    
    input_states = [GPIO.input(pin) for pin in input_pin_numbers]  # Read the state of each input pin
    for i, state in enumerate(input_states):
        if state == GPIO.HIGH:  # If input pin is HIGH
            star_labels[i].config(bg='green')  # Set star label background to green
        else:
            star_labels[i].config(bg='red')  # Set star label background to red

    for label in status_labels:
        label.config(text="", fg='black')  # Reset status labels
    for bar in progress_bars:
        bar.config(value=0)  # Reset progress bars

# Function to update progress bar value
def update_progress(index, value):
    progress_bars[index].config(value=value)  # Set the value of the progress bar

# Create main application window
root = tk.Tk()
root.title("GPIO Tester")  # Set window title

# Create frames for layout
frame1 = tk.Frame(root)
frame1.pack(padx=10, pady=10)  # Add padding around frame
frame2 = tk.Frame(root)
frame2.pack(padx=10, pady=10)  # Add padding around frame

# Create star labels to show input status
star_labels = [tk.Label(frame1, text="â˜…", font=("Arial", 20), bg='gray') for _ in range(7)]
for i, label in enumerate(star_labels):
    label.grid(row=0, column=i, padx=5, pady=5)  # Place star labels in grid

# Create status labels to show pin pair status
status_labels = [tk.Label(frame2, text="", fg='black') for _ in range(7)]
for i, label in enumerate(status_labels):
    label.grid(row=i, column=0, padx=5, pady=5)  # Place status labels in grid

# Create progress bars to show command progress
progress_bars = [ttk.Progressbar(frame2, orient="horizontal", length=200, mode="determinate") for _ in range(7)]
for i, bar in enumerate(progress_bars):
    bar.grid(row=i, column=1, padx=5, pady=5)  # Place progress bars in grid

# Create buttons to run commands and reset GPIO
run_reboot_button = tk.Button(root, text="Run Reboot and Check File", command=lambda: [reboot_and_check_file(i, g_pins[i][0], g_pins[i][1], [], []) for i in range(len(g_pins))])
run_reboot_button.pack(pady=5)  # Add button to run reboot and check file

run_dd_button = tk.Button(root, text="Run dd Command", command=lambda: [execute_dd_command(i, g_pins[i][1]) for i in range(len(g_pins))])
run_dd_button.pack(pady=5)  # Add button to run dd command

reset_button = tk.Button(root, text="Reset", command=reset_pins)
reset_button.pack(pady=5)  # Add button to reset GPIO pins and UI

# Run the main application loop
root.mainloop()
