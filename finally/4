import tkinter as tk 
from tkinter import ttk  # used widgets (progress bar)
import os  
import time  
import RPi.GPIO as GPIO  
import sys  
import subprocess  
from threading import Thread 

# Set GPIO pin numbering mode to BOARD (physical pin numbers)
GPIO.setmode(GPIO.BOARD)

# Define GPIO pins for input and output
input_pin_numbers = [8, 10, 19, 33, 35, 18, 7] #used for LED, determines which output will be programmed
output_pin_numbers = [11, 13, 15, 29, 31, 37, 16] #output used to program the CM4
g_pins = [[8, 11], [10, 13], [19, 15], [33, 29], [35, 31], [18, 37], [7, 16]] #pairs of pins (input,output)

# Setup GPIO input pins
for pin in input_pin_numbers:
    GPIO.setup(pin, GPIO.IN)  # Set pin as input

# Setup GPIO output pins
for pin in output_pin_numbers:
    GPIO.setup(pin, GPIO.OUT)  # Set pin as output
    GPIO.output(pin, 0)  # Initialize pin to LOW

# Function to toggle GPIO output pin based on input pin state
def ONOFF(in_pin, out_pin, onoff_state):
    iter = 0  # Initialize iteration counter to zero
    max_iter = 3  
    if onoff_state:  # If onoff_state is True
        while GPIO.input(in_pin) != onoff_state:
            GPIO.output(out_pin, 1)  # Set output pin to HIGH/1/True (on)
            time.sleep(0.1)  #Wait for 0.1 sec
            GPIO.output(out_pin, 0)  # Set output pin to LOW/0/False
            time.sleep(0.5)  #Wait for 0.5 sec
            if iter > max_iter:  #if max iterations exceeded
                return -1  #Return failure/error/issue
            iter += 1  #Increment/add iteration counter
        return 0  # Return success = 0
    return 0

# Function to run shell command
def run_command(command, timeout=None):
    try:
        process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)  # Run command
        output, error = process.communicate(timeout=timeout)  #get output and error
        return process.returncode, output, error  #return command results
    except subprocess.TimeoutExpired:
        process.kill()  #kill the process if timeout expires
        output, error = process.communicate()  #get output and error
        return -1, output, error  # Return failure = -1

#function to process button press
def buttonProc():
    threads = []  #List to store threads
    success_pins = []  #List to store successful pins
    failed_pins = []  #list to store failed pins

    input_states = [GPIO.input(pin) for pin in input_pin_numbers]  #read the state/status of each input pin

    for i, state in enumerate(input_states):
        if state == GPIO.HIGH:  #if input pin is HIGH/1/True
            star_labels[i].config(bg='green')  #set star label background to green
        else:
            star_labels[i].config(bg='red')  #set star label background to red

    if any(input_states):  #if any input pin is HIGH/1/True
        for pin in output_pin_numbers:
            GPIO.output(pin, 1)  #set all output pins to HIGH/1/True

        for i, pin_pair in enumerate(g_pins): #enumerate allows you to keep track of the number of iter(loops) in a loop
            if GPIO.input(pin_pair[0]) == GPIO.HIGH:  #if input pin of the pair is HIGH/1/True
                thread = Thread(target=handle_pin, args=(i, pin_pair[0], pin_pair[1], success_pins, failed_pins))  #create a thread
                threads.append(thread)  #add thread to the list
                thread.start()  #start the thread

        for thread in threads:
            thread.join()  #Wait for all threads to complete

        for i, pin_pair in enumerate(g_pins):
            if pin_pair[1] in success_pins:  #if output pin is in success list
                status_labels[i].config(text=f"Pin pair {pin_pair[0]} and {pin_pair[1]}: Success", fg='green')  #Update status label to success
            else:
                status_labels[i].config(text=f"Pin pair {pin_pair[0]} and {pin_pair[1]}: Failed", fg='red')  #Update status label to failure
    else:
        for pin in output_pin_numbers:
            GPIO.output(pin, 0)  #Set all OUTPUT pins to LOW if no INPUT pins are HIGH

#Function to handle button click
def buttonFunc():
    x = Thread(target=buttonProc)  #create a thread for buttonProc
    x.start()  #start thread

#function to handle pin programming state/status
def handle_pin(index, in_pin, out_pin, success_pins, failed_pins):
    if ONOFF(in_pin, out_pin, True) < 0:  # Try to toggle the output pin based on input pin state
        status_labels[index].config(text=f"Pin pair {in_pin} and {out_pin}: Failed", fg='red')  #update status label to failure
        return -1  #Return failure = -1
    if wait_for_device(index) < 0:  #wait for the device to be ready for programming
        status_labels[index].config(text=f"Pin pair {in_pin} and {out_pin}: Failed", fg='red')  #update status label to failure
        return -1  # Return failure = -1
    status_labels[index].config(text=f"Pin pair {in_pin} and {out_pin}: Success", fg='green')  #update status label to success
    success_pins.append(out_pin)  #Add to success list
    return 0  #Return success = 0

#Function to wait for the device to be ready
def wait_for_device(index):
    letter = 'a'  # Initialize device letter
    retries = 0  # Initialize retry counter
    command_success = False  # Command success flag

    while not command_success and retries < 3:  # Retry up to 3 times
        os.system("/home/pi/rpiboot_wraper.sh")  # Run the rpiboot wrapper script
        update_progress(index, 30)  # Update progress to 30%
        time.sleep(15)  # Wait for 15 seconds

        fileName = f'/dev/sd{letter}'  # Device file name
        if os.path.exists(fileName):  # Check if device file exists
            command_success = True  # Set command success flag
            print(f"\n Device found at {fileName}")  # Print device found message
        else:
            print(f"\n Retrying command (Attempt {retries + 1})")  # Print retrying message
            retries += 1  # Increment retry counter
            letter = chr(ord(letter) + 1)  # Increment device letter

    if command_success:
        dd_command = "sudo dd bs=4M if=Zyrlo_2022_08_14_RC1.img of=/dev/sdb conv=fsync"  # dd command to program the device
        print("\n Running dd command...")  # Print running dd command message
        update_progress(index, 60)  # Update progress to 60%
        ret_code, dd_output, dd_error = run_command(dd_command)  # Run the dd command

        while True:
            status_command = "status=progress"  # Command to check dd status
            ret_code, status_output, status_error = run_command(status_command)  # Run status command
            if ret_code == 0:  # If status command is successful
                print("\n dd command completed successfully")  # Print success message
                break  # Break the loop
            else:
                print(f"\n dd command failed with error: {status_error}")  # Print failure message
                break  # Break the loop
        update_progress(index, 100)  # Update progress to 100%
        return 0  # Return success
    return -1  # Return failure

# Function to reset GPIO pins and UI elementsdef reset_pins():
def reset_pins():
    for pin in output_pin_numbers:
        GPIO.output(pin, 0)  # Set all output pins to LOW
    for pin in input_pin_numbers:
        GPIO.setup(pin, GPIO.IN)  # Set all input pins to input mode
    for label in star_labels:
        label.config(bg='grey')  # Set all star labels to grey
    for progress in progress_bars:
        progress.config(value=0)  # Reset all progress bars to 0
    for label in status_labels:
        label.config(text="Not started", fg='black')  # Reset status labels to "Not started"

# Function to handle window closing event
def on_closing():
    GPIO.cleanup()  # Clean up GPIO settings
    print("\n GPIO cleaned up")  # Print GPIO cleaned up message
    sys.exit(0)  # Exit the program

# Function to update progress bar
def update_progress(index, value):
    progress_bars[index].config(value=value)  # Update progress bar value
    window.update_idletasks()  # Update GUI

# GUI setup
window = tk.Tk()  # Create the main window
window.title("Pin Status Monitor")  # Set the window title

frame = tk.Frame(window)  # Create a frame in the window
frame.pack(padx=10, pady=10)  # Add padding to the frame

status_labels = []  # List to store status labels
progress_bars = []  # List to store progress bars
star_labels = []  # List to store star labels

# Create status labels, progress bars, and star labels for each pin pair
for i, pin_pair in enumerate(g_pins):
    label = tk.Label(frame, text=f"Pin pair {pin_pair[0]} and {pin_pair[1]}: Not started")  # Create a status label
    label.grid(row=i, column=0, padx=5, pady=5)  # Place the label in the grid
    status_labels.append(label)  # Add label to the list

    progress = ttk.Progressbar(frame, orient="horizontal", length=400, mode="determinate")  # Create a progress bar
    progress.grid(row=i, column=1, padx=5, pady=5)  # Place the progress bar in the grid
    progress_bars.append(progress)  # Add progress bar to the list

    star = tk.Label(frame, text="â˜…", font=("Arial", 20), bg='red')  # Create a star label
    star.grid(row=i, column=2, padx=5, pady=5)  # Place the star label in the grid
    star_labels.append(star)  # Add star label to the list

reset_button = tk.Button(window, text="Reset Pins", command=reset_pins)  # Create a reset button
reset_button.pack(pady=10)  # Place the reset button in the window

run_button = tk.Button(window, text="Run Commands", command=buttonFunc)  # Create a run reboot button
run_button.pack(pady=10)  # Place the run reboot button in the window

window.protocol("WM_DELETE_WINDOW", on_closing)  # Handle window closing event
window.mainloop()  # Start the GUI main loop
